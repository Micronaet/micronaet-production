# -*- coding: utf-8 -*-
###############################################################################
#
# ODOO (ex OpenERP) 
# Open Source Management Solution
# Copyright (C) 2001-2015 Micronaet S.r.l. (<http://www.micronaet.it>)
# Developer: Nicola Riolini @thebrush (<https://it.linkedin.com/in/thebrush>)
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################


from openerp import api, models

class ReportProductionGrud(models.AbstractModel):
    ''' Report grid for production
    '''
    
    _name = 'report.production_grid_report.report_production_grid'

    # -------------------------------------------------------------------------
    # Render method:
    # -------------------------------------------------------------------------
    @api.multi
    def render_html(self, data=None):
        ''' Render report action:
        '''
        # ---------------------------------------------------------------------
        # Set up private variables:
        # ---------------------------------------------------------------------
        self.rows = []
        self.cols = []
        
        report_obj = self.env['report']
        report = report_obj._get_report_from_name(
            'production_grid_report.report_production_grid')
            
        docargs = {
            # Always present:
            'doc_ids': self._ids,
            'doc_model': report.model,
            'docs': self,
            
            # Report customization:
            'startup': self._startup,
            'get_rows': self._get_rows,
            'get_cols': self._get_cols,
            'get_cell': self._get_cell,            
            'get_row_total': self._get_row_total,
            'format_date': self._format_date,
            }

        return report_obj.render(
            'production_grid_report.report_production_grid', 
            docargs, 
            )

    # -------------------------------------------------------------------------
    # Report methods:
    # -------------------------------------------------------------------------
    def _startup(self, o, data=None):
        ''' Master function for prepare report
        '''
        if data is None:
            data = {}
                    
        # initialize globals:
        self.rows = []
        self.cols = {}
        self.row_total = {}
        
        # -------------------
        # Read cols elements:        
        # -------------------
        mrp_proxy = self.pool.get('mrp.production').browse(
            self.env.cr, self.env.uid, o.id)
        for sol in mrp_proxy.order_line_ids:
            # Col:
            col_key = (
                sol.date_deadline, # line deadline
                sol.order_id.name, # Num. order
                sol.order_id.partner_id.name,
                #sol.order_id.production_note,
                #sol.order_id.note,
                )                
            if col_key not in self.cols:
                self.cols[col_key] = {}
                
            # Row:    
            row_key = sol.product_id.default_code # TODO sequence order?            
            if row_key not in self.rows:
                self.rows.append(row_key)
                
            # Cell:    
            self.cols[col_key][row_key] = sol.product_uom_qty
            if row_key not in self.row_total:
                self.row_total[row_key] = 0
            self.row_total[row_key] += sol.product_uom_qty           
                                
        self.rows.sort()
        return True

    def _format_date(self, date):
        ''' Format date in italian
        '''        
        return '%s-%s-%s' % (
            date[8:10],
            date[5:7],
            date[:4],
            )

    def _get_row_total(self, article):
        ''' Rows list (generated by _start_up function)
        '''
        return int(self.row_total.get(article, 0))

    def _get_rows(self):
        ''' Rows list (generated by _start_up function)
        '''
        return self.rows

    def _get_cols(self):
        ''' Rows list (generated by _start_up function)
        '''
        return self.cols.keys()

    def _get_cell(self, col, row):
        ''' Return cell elements or empty one if not present
        '''        
        val = self.cols[col].get(row, '')
        if val:
            return int(val)
        else:    
            return val
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
